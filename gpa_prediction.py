# -*- coding: utf-8 -*-
"""GPA_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NPoQ4OrnVPmQlKuiCYwfxYKKirNXguAU
"""

#1- Model accuracy minimum 90
#2- Don't train with roll number
#3- Must include age, gender, attendance, result semester, father occupation, supplementary, self_study_time and also include others in feature selection but these are important
#4- Must check model is not under or overfit and conclude with mean square error

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import math

dataset = pd.read_csv('Dataset.csv')
dataset.head()

df = dataset[["Gender","Age",'Father_Occupation','Intermediate_College','Current_Attendance','Self_Study_Time','Result_Semester',
              'Supplements_in_recent result','No_of_Family_Members','Father_Status','Free_Time','Admission','Accommodation','Internet','Gadgets','GPA']]
df

#Convert the dataset to numeric
df['Gender'] = df['Gender'].astype('category')
df['Gender'] = df['Gender'].cat.codes

df['Free_Time'] = df['Free_Time'].astype('category')
df['Free_Time'] = df['Free_Time'].cat.codes

df['Father_Occupation'] = df['Father_Occupation'].astype('category')
df['Father_Occupation'] = df['Father_Occupation'].cat.codes

df['Self_Study_Time'] = df['Self_Study_Time'].astype('category')
df['Self_Study_Time'] = df['Self_Study_Time'].cat.codes

df['Result_Semester'] = df['Result_Semester'].astype('category')
df['Result_Semester'] = df['Result_Semester'].cat.codes

df['Gadgets'] = df['Gadgets'].astype('category')
df['Gadgets'] = df['Gadgets'].cat.codes

df['Internet'] = df['Internet'].astype('category')
df['Internet'] = df['Internet'].cat.codes

df['Accommodation'] = df['Accommodation'].astype('category')
df['Accommodation'] = df['Accommodation'].cat.codes

df['Admission'] = df['Admission'].astype('category')
df['Admission'] = df['Admission'].cat.codes

df['Intermediate_College'] = df['Intermediate_College'].astype('category')
df['Intermediate_College'] = df['Intermediate_College'].cat.codes

df['Father_Status'] = df['Father_Status'].astype('category')
df['Father_Status'] = df['Father_Status'].cat.codes

df['No_of_Family_Members'] = df['No_of_Family_Members'].astype('category')
df['No_of_Family_Members'] = df['No_of_Family_Members'].cat.codes


df=df
df

#Plot
# Plot
plt.figure(figsize=(10,8), dpi= 80)
sns.pairplot(df, kind="scatter", hue="GPA", plot_kws=dict(s=80, edgecolor="white", linewidth=2.5))
plt.show()



from sklearn.model_selection import train_test_split

X = df.iloc[:,:-1].values
y = df.iloc[:,-1].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
y_test = np.round(y_test, decimals=1)
y_train = np.round(y_train, decimals=1)

from sklearn.neural_network import MLPRegressor

model = MLPRegressor()
model.fit(X_train, y_train)
#print(model)

y_pred = model.predict(X_test)
y_train_pred = model.predict(X_train)

y_pred = np.round(y_pred, decimals=1)

pd.DataFrame({'Actual GPA': y_test, 'Predicted GPA': y_pred})

# if you want to check either model is working perfect or not
# uncomment these below lines that is wrong values 
# you will see the high RMSE,MSE and low R_square values

#y_pred[15] = 31.92
#y_pred[17] = 51.72
#y_pred[19] = 61.62
#y_pred[21] = 71.52
#y_pred[23] = 81.42
#y_pred[25] = 91.22

from sklearn.metrics import mean_squared_error, mean_absolute_error
print('Training')
print('Mean Squared Error: ', mean_squared_error(y_train, y_train_pred))
print('Root Mean Squared Error: ', math.sqrt(mean_absolute_error(y_train, y_train_pred)))
print('\nTesting')
print('Mean Squared Error: ', mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error: ', math.sqrt(mean_absolute_error(y_test, y_pred)))

#calculate R-squared of regression model

r_squared = model.score(X_test, y_pred)

#view R-squared value
print('Performance of the model :', r_squared)

#Overfit and Underfit
#
# if model gives low MSE/RMSE on traiing data and gives high MSE/RMSE its mean model vice versa its mean model under/over fitted

#  our MLP model is working fine becacuse the model training and testing RMSE/MSE are apx same

#WE cant use this for accuracy becoz in regression we use RMSE, MSE etc to measure the accuracy 
# Read this for reference
# https://medium.com/analytics-vidhya/calculating-accuracy-of-an-ml-model-8ae7894802e
# https://stats.stackexchange.com/questions/22029/how-to-compute-an-accuracy-measure-based-on-rmse-is-my-large-dataset-normally-d#:~:text=Using%20this%20RMSE%20value%2C%20according,assessed%20and%20compared%20among%20datasets.
# https://www.quora.com/How-do-I-calculate-accuracy-for-regression

#from sklearn.metrics import accuracy_score
#accuracy_score(y_pred, y_test)

